unit UClientesView;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.ComCtrls,
  Vcl.StdCtrls, Vcl.Buttons, PngBitBtn, Vcl.Mask, UEstadoTelaUtil, UCliente,
  UClienteController;

type
  TfrmClientes = class(TForm)
    sbrBarra: TStatusBar;
    pnlBotao: TPanel;
    pnlCorpo: TPanel;
    grbCad: TGroupBox;
    lblId: TLabel;
    edtId: TEdit;
    lblNome: TLabel;
    edtNome: TEdit;
    chkAtivo: TCheckBox;
    btnSair: TPngBitBtn;
    btnConfirmar: TPngBitBtn;
    btnIncluir: TPngBitBtn;
    btnAlterar: TPngBitBtn;
    btnExcluir: TPngBitBtn;
    btnConsultar: TPngBitBtn;
    grbEnd: TGroupBox;
    lblCidade: TLabel;
    lblEndereco: TLabel;
    edtCidade: TEdit;
    edtEndereco: TEdit;
    lblUF: TLabel;
    edtUF: TEdit;
    lblCEP: TLabel;
    mskCep: TMaskEdit;
    lblNumero: TLabel;
    edtNumero: TEdit;
    procedure btnSairClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure btnConfirmarClick(Sender: TObject);
    procedure edtIdExit(Sender: TObject);
    procedure edtUFKeyPress(Sender: TObject; var Key: Char);
    procedure edtNumeroKeyPress(Sender: TObject; var Key: Char);
    procedure mskCepExit(Sender: TObject);
  private
     { Private declarations }
     vKey : Word;

     vEstadoTela : TEstadoTela;
     vObjCliente : TCliente;

     procedure DefineEstadoTela;
     procedure LimpaTela;
     procedure HabilitaCampos(pOpcao : Boolean);
     procedure CarregaDadosTela;

     function TrataClienteAtivo   : Integer;
     function RecebeClienteAtivo  : Boolean;
     function ProcessaConfirmacao : Boolean;
     function ProcessaInclusao    : Boolean;
     function ProcessaCliente     : Boolean;
     function ProcessaPessoa      : Boolean;
     function ValidaCliente       : Boolean;
     function ProcessaConsulta    : Boolean;
     function ProcessaAlteracao   : Boolean;
     function ProcessaExclusao    : Boolean;
  public
     { Public declarations }
  end;

var
  frmClientes: TfrmClientes;

implementation

uses
   UPrincipalView, UMensagemUtil,UEndereco, UConsultaCEP;

{$R *.dfm}

procedure TfrmClientes.btnAlterarClick(Sender: TObject);
begin
   vEstadoTela := etAlterar;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnConfirmarClick(Sender: TObject);
begin
   ProcessaConfirmacao;
end;

procedure TfrmClientes.btnConsultarClick(Sender: TObject);
begin
   vEstadoTela := etConsultar;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnExcluirClick(Sender: TObject);
begin
   vEstadoTela := etExcluir;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnIncluirClick(Sender: TObject);
begin
   vEstadoTela := etIncluir;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnSairClick(Sender: TObject);
begin
   if (vEstadoTela <> etPadrao)then
   begin
      if TMensagemUtil.Pergunta(Self, 'Deseja realmente abortar essa operação?') then
      begin
         vEstadoTela := etPadrao;
         DefineEstadoTela;
      end;
   end
   else
      Close;
end;

procedure TfrmClientes.CarregaDadosTela;
begin
   if (vObjCliente = nil) then
      Exit;

   edtId.Text       := IntToStr(vObjCliente.Id);
   edtNome.Text     := vObjCliente.Nome;
   chkAtivo.Checked := RecebeClienteAtivo;
   mskCep.Text      := vObjCliente.CEP;
   edtCidade.Text   := vObjCliente.Cidade;
   edtEndereco.Text := vObjCliente.Endereco;
   edtUF.Text       := vObjCliente.UF;
   edtNumero.Text   := vObjCliente.Numero;
end;

procedure TfrmClientes.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   Action      := CaFree;
   frmClientes := Nil;
   frmPrincipal.sbrBarraStatus.Panels[1].Text := EmptyStr;
end;

procedure TfrmClientes.FormCreate(Sender: TObject);
begin
   vEstadoTela := etPadrao;
end;

procedure TfrmClientes.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
   vKey := Key;

   case vKey of
      VK_RETURN:
      begin
         Perform(WM_NextDlgCtl, 0, 0);
      end;

      VK_ESCAPE:
      begin
         if (vEstadoTela <> etPadrao)then
         begin
            if TMensagemUtil.Pergunta(Self, 'Deseja realmente abortar essa operação?') then
            begin
               vEstadoTela := etPadrao;
               DefineEstadoTela;
            end;
         end
         else
         begin
            if TMensagemUtil.Pergunta(Self, 'Deseja sair da rotina?') then
               Close;
         end;
      end;
   end;
end;

procedure TfrmClientes.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
   vKey := VK_CLEAR;
end;

procedure TfrmClientes.FormShow(Sender: TObject);
begin
   DefineEstadoTela;
end;

procedure TfrmClientes.LimpaTela;
var
   i : Integer;
begin
   for i := 0 to pred (ComponentCount) do
   begin
      if (Components[i] is TEdit) then
         (Components[i] as TEdit) .Text := EmptyStr;

      if (Components[i] is TMaskEdit) then
         (Components[i] as TMaskEdit) .Text := EmptyStr;

      if (Components[i] is TCheckBox) then
         (Components[i] as TCheckBox) .Checked := False;
   end;
end;

procedure TfrmClientes.mskCepExit(Sender: TObject);
var
   xObjConsulta : TEndereco;
begin
   if vKey = 13 then
   begin
      try
         xObjConsulta := TConsultaCEP.getInstacia.BuscaCEP(mskCep.Text);

         if xObjConsulta <> nil then
         begin
            edtCidade.Text   := xObjConsulta.Cidade;
            edtEndereco.Text := xObjConsulta.Endereco;
            edtUF.Text       := xObjConsulta.UF;
         end;
      finally
         if xObjConsulta <> nil then
            FreeAndNil(xObjConsulta);
      end;
   end;
end;

function TfrmClientes.ProcessaConfirmacao: Boolean;
begin
   Result := False;
   try
      case vEstadoTela of
         etIncluir   : Result := ProcessaInclusao;
         etAlterar   : Result := ProcessaAlteracao;
      end;

      if not Result then
         Exit;
   except
      on E:Exception do
         Application.MessageBox(PWideChar('Ocorreu o seguinte problema' + #13 +
         E.Message), 'Alerta', MB_ICONERROR);
   end;

   Result := True;
end;

function TfrmClientes.ProcessaConsulta: Boolean;
begin
   try
      Result := False;

      if edtId.Text = EmptyStr then
      begin
         TMensagemUtil.Alerta(Self, 'Código do cliente não pode ficar em branco');

         if (edtId.CanFocus) then
            edtId.SetFocus;

         Exit;
      end;

      vObjCliente :=
         TCliente(TClienteController.getInstancia.BuscaCliente(
           StrToIntDef(edtId.Text, 0)));

      if (vObjCliente <> nil) then
         CarregaDadosTela
      else
      begin
         TMensagemUtil.Alerta(Self, 'Nenhum cliente encontrado para o código informado');
         LimpaTela;

         if (edtId.CanFocus) then
            edtId.SetFocus;

         Exit;
      end;

      DefineEstadoTela;
      Result := True;
   except
      on e:Exception do
      begin
         raise Exception.Create('Falha ao consultar os dados de cliente'#13 +
         e.Message);
      end;
   end;
end;

function TfrmClientes.ProcessaExclusao: Boolean;
begin
   try
      Result := False;

      if vObjCliente = nil then
      begin
         TMensagemUtil.Alerta(Self,
            'Não foi possivel carregar todos os dados cadastrados do cliente');
         LimpaTela;
         vEstadoTela := etPadrao;
         DefineEstadoTela;
         Exit;
      end;

      try
         if TMensagemUtil.Pergunta(Self, 'Confirma a exclusão do cliente?') then
         begin
            Screen.Cursor := crHourGlass;
            TClienteController.getInstancia.ExcluiCliente(vObjCliente);

            TMensagemUtil.Informacao(Self, 'Cliente excluido com sucesso.');
         end
         else
         begin
            LimpaTela;
            vEstadoTela := etPadrao;
            DefineEstadoTela;
            Exit;
         end;
      finally
         Screen.Cursor := crDefault;
         Application.ProcessMessages;
      end;
      Result := True;

      LimpaTela;
      vEstadoTela := etPadrao;
      DefineEstadoTela;
   except
      on e:exception do
      begin
         raise Exception.Create('Falha ao excluir dados do cliente' + e.Message);
      end;
   end;
end;

function TfrmClientes.ProcessaInclusao: Boolean;
begin
   try
      Result := False;

      if ProcessaCliente then
      begin
         vObjCliente :=
            TClienteController.getInstancia.RetornaUltimoID(
               'Id');

         TMensagemUtil.Informacao(Self, 'Cliente cadastrado com sucesso.'#13 +
         'Codigo Cliente: ' + IntToStr(vObjCliente.Id));

         vEstadoTela := etPadrao;
         DefineEstadoTela;

         vObjCliente.Id := 0;

         Result := True;
      end;
   except
      on e: Exception do
      begin
         raise Exception.Create(
         'Faha ao incluir os dados do cliente: ' + #13 +
         e.Message);
      end;
   end;
end;

function TfrmClientes.ProcessaPessoa: Boolean;
begin
   try
      Result := False;

      if not ValidaCliente then
         Exit;

      if vEstadoTela = etIncluir then
      begin
         if vObjCliente <> nil then
            FreeAndNil(vObjCliente);

         if vObjCliente = nil then
            vObjCliente := TCliente.Create;
      end
      else
      if vEstadoTela = etAlterar then
      begin
         if vObjCliente = nil then
            vObjCliente := TCliente.Create;
      end;

      if vObjCliente = nil then
            Exit;

      vObjCliente.Nome     := edtNome.Text;
      vObjCliente.Ativo    := TrataClienteAtivo;
      vObjCliente.CEP      := mskCep.Text;
      vObjCliente.Cidade   := edtCidade.Text;
      vObjCliente.UF       := edtUF.Text;
      vObjCliente.Endereco := edtEndereco.Text;
      vObjCliente.Numero   := edtNumero.Text;

      Result := True;
   except
      on e:exception do
      begin
         raise Exception.Create('Falha ao processar dados do cliente' + #13 +
         e.Message);
      end;
   end;
end;

function TfrmClientes.RecebeClienteAtivo: Boolean;
begin
   case vObjCliente.Ativo of
      0 : Result := False;
      1 : Result := True;
   end;
end;

function TfrmClientes.TrataClienteAtivo: Integer;
begin
   if chkAtivo.Checked then
      Result := 1
   else
      Result := 0;
end;

function TfrmClientes.ValidaCliente: Boolean;
begin
   Result := False;

   if edtNome.Text = EmptyStr then
   begin
      TMensagemUtil.Alerta(Self, 'Nome do Cliente não pode ficar em branco.');

      if edtNome.CanFocus then
         edtNome.SetFocus;
      Exit;
   end;

   Result := True;
end;

function TfrmClientes.ProcessaAlteracao: Boolean;
begin
   try
      Result := False;

      if ProcessaCliente then
      begin
         TMensagemUtil.Informacao(Self, 'Dados alterados com sucesso');

         vEstadoTela := etPadrao;
         DefineEstadoTela;
         Result := True;
      end;
   except
      on e:exception do
      begin
         raise Exception.Create('Falha ao alterar dados do cliente' + e.Message);
      end;
   end;
end;

function TfrmClientes.ProcessaCliente: Boolean;
begin
   try
      if ProcessaPessoa then
      begin
         TClienteController.getInstancia.GravaCliente(vObjCliente);
         Result := True;
      end;
   except
      on e:Exception do
      begin
         TMensagemUtil.Alerta(Self, 'Erro ao processar cliente:'#13 + e.Message);
      end;
   end;
end;

procedure TfrmClientes.HabilitaCampos(pOpcao: Boolean);
var
   i : Integer;
begin
   for i := 0 to pred(ComponentCount) do
   begin
      if (Components[i] is TEdit) then
         (Components[i] as TEdit).Enabled := pOpcao;

      if (Components[i] is TMaskEdit) then
         (Components[i] as TMaskEdit) .Enabled := pOpcao;

      if (Components[i] is TCheckBox) then
         (Components[i] as TCheckBox) .Enabled := pOpcao;
   end;
end;

procedure TfrmClientes.DefineEstadoTela;
begin
   btnIncluir.Enabled   := (vEstadoTela in [etPadrao]);
   btnAlterar.Enabled   := (vEstadoTela in [etPadrao]);
   btnExcluir.Enabled   := (vEstadoTela in [etPadrao]);
   btnConsultar.Enabled := (vEstadoTela in [etPadrao]);

   btnConfirmar.Enabled :=
      vEstadoTela in [etIncluir, etAlterar, etExcluir, etConsultar];

   case vEstadoTela of
      etPadrao:
      begin
        HabilitaCampos(False);
        LimpaTela;

        sbrBarra.Panels[0].Text := EmptyStr;

        if (frmClientes <> nil) and
           (frmClientes.Active) and
           (btnIncluir.CanFocus) then
           btnIncluir.SetFocus;

           Application.ProcessMessages;
      end;

      etIncluir:
      begin
         sbrBarra.Panels[0].Text := 'Inclusão';
         HabilitaCampos(True);

         edtId.Enabled    := False;
         chkAtivo.Checked := True;

         if edtNome.CanFocus then
            edtNome.SetFocus;
      end;

      etAlterar:
      begin
         sbrBarra.Panels[0].Text := 'Alteração';
         HabilitaCampos(False);

         if (edtId.Text <> EmptyStr) then
         begin
            HabilitaCampos(True);

            edtId.Enabled    := False;
            btnAlterar.Enabled   := False;
            btnConfirmar.Enabled := True;
         end
         else
         begin
            edtId.Enabled := True;

            if (edtId.CanFocus) then
               edtId.SetFocus;
         end;
      end;

      etExcluir:
      begin
         sbrBarra.Panels[0].Text := 'Exclusão';
         if (edtId.Text <> EmptyStr) then
            ProcessaExclusao
         else
         begin
            edtId.Enabled := True;

            if (edtId.CanFocus) then
               edtId.SetFocus;
         end;
      end;

      etConsultar:
      begin
         sbrBarra.Panels[0].Text := 'Consulta';
         HabilitaCampos(False);

         if (edtId.Text <> EmptyStr) then
         begin
            edtId.Enabled    := False;
            btnAlterar.Enabled   := True;
            btnExcluir.Enabled   := True;
            btnConfirmar.Enabled := False;

            if btnAlterar.CanFocus then
               btnAlterar.SetFocus;
         end
         else
         begin
            edtId.Enabled := True;

            if edtId.CanFocus then
               edtId.SetFocus;
         end;
      end;

   end;
end;

procedure TfrmClientes.edtIdExit(Sender: TObject);
begin
   if vKey = VK_RETURN then
   begin
      ProcessaConsulta;
   end;

   vKey := VK_CLEAR;
end;

procedure TfrmClientes.edtNumeroKeyPress(Sender: TObject; var Key: Char);
begin
   if not (Key in ['0'..'9', #8]) then
      Key := #0;
end;

procedure TfrmClientes.edtUFKeyPress(Sender: TObject; var Key: Char);
begin
   if not(Key in ['A'..'Z','a'..'z', #8]) then
      Key := #0;
end;

end.
