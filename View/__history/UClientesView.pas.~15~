unit UClientesView;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.ComCtrls,
  Vcl.StdCtrls, Vcl.Buttons, PngBitBtn, Vcl.Mask, UEstadoTelaUtil;

type
  TfrmClientes = class(TForm)
    sbrBarra: TStatusBar;
    pnlBotao: TPanel;
    pnlCorpo: TPanel;
    grbCad: TGroupBox;
    lblId: TLabel;
    edtId: TEdit;
    lblNome: TLabel;
    edtNome: TEdit;
    chkAtivo: TCheckBox;
    btnSair: TPngBitBtn;
    btnConfirmar: TPngBitBtn;
    btnIncluir: TPngBitBtn;
    btnAlterar: TPngBitBtn;
    btnExcluir: TPngBitBtn;
    btnConsultar: TPngBitBtn;
    grbEnd: TGroupBox;
    lblCidade: TLabel;
    lblEndereco: TLabel;
    edtCidade: TEdit;
    edtEndereco: TEdit;
    lblUF: TLabel;
    edtUF: TEdit;
    lblCEP: TLabel;
    mskCep: TMaskEdit;
    lblNumero: TLabel;
    edtNumero: TEdit;
    procedure btnSairClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure btnConfirmarClick(Sender: TObject);
  private
     { Private declarations }
     vKey : Word;

     vEstadoTela : TEstadoTela;

     procedure DefineEstadoTela;
     procedure LimpaTela;
     procedure CamposEnable(pOpcao : Boolean);
  public
     { Public declarations }
  end;

var
  frmClientes: TfrmClientes;

implementation

uses
   UPrincipalView, UMensagemUtil;

{$R *.dfm}

procedure TfrmClientes.btnAlterarClick(Sender: TObject);
begin
   vEstadoTela := etAlterar;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnConfirmarClick(Sender: TObject);
begin
   //ProcessaConfirmacao;
end;

procedure TfrmClientes.btnConsultarClick(Sender: TObject);
begin
   vEstadoTela := etConsultar;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnExcluirClick(Sender: TObject);
begin
   vEstadoTela := etExcluir;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnIncluirClick(Sender: TObject);
begin
   vEstadoTela := etIncluir;
   DefineEstadoTela;
end;

procedure TfrmClientes.btnSairClick(Sender: TObject);
begin
   if (vEstadoTela <> etPadrao)then
   begin
      if TMensagemUtil.Pergunta('Deseja realmente abortar essa operação?') then
      begin
         vEstadoTela := etPadrao;
         DefineEstadoTela;
      end;
   end
   else
      Close;
end;

procedure TfrmClientes.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   Action      := CaFree;
   frmClientes := Nil;
   frmPrincipal.sbrBarraStatus.Panels[0].Text := EmptyStr;
end;

procedure TfrmClientes.FormCreate(Sender: TObject);
begin
   vEstadoTela := etPadrao;
end;

procedure TfrmClientes.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
   vKey := Key;

   case vKey of
      VK_RETURN:
      begin
         Perform(WM_NextDlgCtl, 0, 0);
      end;

      VK_ESCAPE:
      begin
         if (vEstadoTela <> etPadrao)then
         begin
            if TMensagemUtil.Pergunta(Self, 'Deseja realmente abortar essa operação?') then
            begin
               vEstadoTela := etPadrao;
               DefineEstadoTela;
            end;
         end
         else
         begin
            if TMensagemUtil.Pergunta(Self, 'Deseja sair da rotina?') then
               Close;
         end;
      end;
   end;
end;

procedure TfrmClientes.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
   vKey := VK_CLEAR;
end;

procedure TfrmClientes.FormShow(Sender: TObject);
begin
   DefineEstadoTela;
end;

procedure TfrmClientes.LimpaTela;
var
   i : Integer;
begin
   for i := 0 to pred (ComponentCount) do
   begin
      if (Components[i] is TEdit) then
         (Components[i] as TEdit) .Text := EmptyStr;

      if (Components[i] is TMaskEdit) then
         (Components[i] as TMaskEdit) .Text := EmptyStr;

      if (Components[i] is TCheckBox) then
         (Components[i] as TCheckBox) .Checked := False;
   end;
end;

procedure TfrmClientes.CamposEnable(pOpcao: Boolean);
var
   i : Integer;
begin
   for i := 0 to pred(ComponentCount) do
   begin
      if (Components[i] is TEdit) then
         (Components[i] as TEdit).Enabled := pOpcao;

      if (Components[i] is TMaskEdit) then
         (Components[i] as TMaskEdit) .Enabled := pOpcao;

      if (Components[i] is TCheckBox) then
         (Components[i] as TCheckBox) .Enabled := pOpcao;
   end;
end;

procedure TfrmClientes.DefineEstadoTela;
begin
   btnIncluir.Enabled   := (vEstadoTela in [etPadrao]);
   btnAlterar.Enabled   := (vEstadoTela in [etPadrao]);
   btnExcluir.Enabled   := (vEstadoTela in [etPadrao]);
   btnConsultar.Enabled := (vEstadoTela in [etPadrao]);

   btnConfirmar.Enabled :=
      vEstadoTela in [etIncluir, etAlterar, etExcluir, etConsultar];

   case vEstadoTela of
      etPadrao:
      begin
        CamposEnable(False);
        LimpaTela;

        sbrBarra.Panels[0].Text := EmptyStr;

        if (frmClientes <> nil) and
           (frmClientes.Active) and
           (btnIncluir.CanFocus) then
           btnIncluir.SetFocus;

           Application.ProcessMessages;
      end;

      etIncluir:
      begin
         sbrBarra.Panels[0].Text := 'Inclusão';
         CamposEnable(True);

         edtId.Enabled:= False;

         chkAtivo.Checked := True;

         if edtNome.CanFocus then
            edtNome.SetFocus;
      end;

   end;
end;

end.
